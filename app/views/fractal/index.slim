canvas#fractal

javascript:
  let canvas      = document.getElementById(`fractal`);
  let ctx         = canvas.getContext(`2d`);
  let fractal     = { color: false };
  canvas.width    = window.innerWidth;
  canvas.height   = window.innerHeight;
  let coords = {
       0: {enabled: false, coord: [-3, -3]},
       1: {enabled: false, coord: [-2, -3]},
       2: {enabled: false, coord: [-1, -3]},
       3: {enabled: false, coord: [ 0, -3]},
       4: {enabled: false, coord: [ 1, -3]},
       5: {enabled: false, coord: [ 2, -3]},
       6: {enabled: false, coord: [-3, -2]},
       7: {enabled: false, coord: [-2, -2]},
       8: {enabled: false, coord: [-1, -2]},
       9: {enabled: false, coord: [ 0, -2]},
      10: {enabled: false, coord: [ 1, -2]},
      11: {enabled: false, coord: [ 2, -2]},
      12: {enabled: false, coord: [-3, -1]},
      13: {enabled: false, coord: [-2, -1]},
      14: {enabled: false, coord: [-1, -1]},
      15: {enabled: false, coord: [ 0, -1]},
      16: {enabled: false, coord: [ 1, -1]},
      17: {enabled: false, coord: [ 2, -1]},
      18: {enabled: false, coord: [-3,  0]},
      19: {enabled: false, coord: [-2,  0]},
      20: {enabled: false, coord: [-1,  0]},
      21: {enabled: false, coord: [ 0,  0]},
      22: {enabled: false, coord: [ 1,  0]},
      23: {enabled: false, coord: [ 2,  0]},
      24: {enabled: false, coord: [-3,  1]},
      25: {enabled: false, coord: [-2,  1]},
      26: {enabled: false, coord: [-1,  1]},
      27: {enabled: false, coord: [ 0,  1]},
      28: {enabled: false, coord: [ 1,  1]},
      29: {enabled: false, coord: [ 2,  1]},
      30: {enabled: false, coord: [-3,  2]},
      31: {enabled: false, coord: [-2,  2]},
      32: {enabled: false, coord: [-1,  2]},
      33: {enabled: false, coord: [ 0,  2]},
      34: {enabled: false, coord: [ 1,  2]},
      35: {enabled: false, coord: [ 2,  2]}
  };

  drawFractal();
  canvas.addEventListener('mousedown', function (e) {
      let rect = canvas.getBoundingClientRect();
      let _x = Math.round((e.clientX - rect.left) / 12) - 2;
      let _y = Math.round((e.clientY - rect.top ) / 12) - 7;
      console.log(`x ${_x}, y: ${_y}`);
      if (_x === 7 && _y === 1) {
          fractal.color = !fractal.color;
          ctx.fillStyle = `#000000`;
          ctx.fillRect(_x * 12 + 20, _y * 12 + 80, 10, 10);
      } else {
          let z = 6 * (_y -1) + _x - 1;
          coords[z].enabled = !coords[z].enabled
      }
      drawFractal();
  });

  function drawFractal() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.strokeStyle = '#000000';
      ctx.fillStyle   = '#000000';
      Object.entries(coords).forEach((value, key) => {
          let x = (value[1].coord[0] + 4) * 12 + 20;
          let y = (value[1].coord[1] + 4) * 12 + 80;
          value[1].enabled ? ctx.fillRect(x, y, 10, 10) : ctx.rect(x, y, 10, 10)
      });
      ctx.rect(104, 92, 10, 10);
      ctx.stroke();

      let crds = Object.entries(coords).filter(a => a[1].enabled);
      for (let m = 0; m <= 15; m += 1) {
          for (let i = 0; i <= 15; i += 1) {
              for (let j = 0; j <= 15; j += 1) {
                  for (let k = 0; k <= 15; k += 1) {
                      if (crds[m] && crds[i] && crds[j] && crds[k]) {
                          let xx = 64 * crds[m][1].coord[0] + 16 * crds[i][1].coord[0] + 4 * crds[j][1].coord[0] + crds[k][1].coord[0];
                          let yy = 64 * crds[m][1].coord[1] + 16 * crds[i][1].coord[1] + 4 * crds[j][1].coord[1] + crds[k][1].coord[1];
                          if (fractal.color) ctx.fillStyle = `#${((i + 1) * 15).toString(16)}${((j + 1) * 15).toString(16)}${((k + 1) * 15).toString(16)}`;
                          ctx.fillRect(canvas.width / 2 + xx, canvas.height / 2 + yy, 1, 1)
                      }
                  }
              }
          }
      }
  }

  //  10 DIM X(16): DIM Y(16)
  //  20 FOR I = 1 TO 4
  //  30 FOR J = 1 TO 4
  //  40 LET K = 4 * I + J - 4
  //  50 LET X(K) = J - 3: LET Y(K) = I - 3
  //  60 NEXT J: NEXT I
  //  70 LET X(2)  =  0: LET Y(2)  = -3
  //  80 LET X(8)  =  2: LET Y(8)  =  0
  //  90 LET X(9)  = -3: LET Y(9)  = -1
  // 100 LET X(15) = -1: LET Y(15) =  2
  // 110 FOR I=1 TO 16
  // 120 FOR J=1 TO 16
  // 130 FOR K=1 TO 16
  // 140 LET XX = 16 * X(I) + 4 * X(J) + X(K)
  // 150 LET YY = 16 * Y(I) + 4 * Y(J) + Y(K)
  // 160 PLOT 126 + XX, 88 + YY
  // 170 NEXT K: NEXT J: NEXT I
